using System.Collections.Generic;
using System.Linq;
using System.Text;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;


namespace Tmds.DBus.SourceGenerator
{
    [Generator]
    public partial class DBusSourceGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context) { }

        public void Execute(GeneratorExecutionContext context)
        {
            IEnumerable<ClassDeclarationSyntax> classNodes = context.Compilation.SyntaxTrees.SelectMany(static tree => tree.GetRoot().DescendantNodes().OfType<ClassDeclarationSyntax>());
            INamedTypeSymbol? attributeType = context.Compilation.GetTypeByMetadataName("Tmds.DBus.SourceGenerator.DBusInterfaceAttribute");
            foreach (ClassDeclarationSyntax classNode in classNodes)
            {
                SemanticModel semanticModel = context.Compilation.GetSemanticModel(classNode.SyntaxTree);
                INamedTypeSymbol? declaredClass = semanticModel.GetDeclaredSymbol(classNode);
                if (declaredClass is null) return;
                AttributeData? attribute = declaredClass.GetAttributes().FirstOrDefault(x => SymbolEqualityComparer.Default.Equals(x.AttributeClass, attributeType));
                if (attribute is null) continue;
                string @namespace = declaredClass.ContainingNamespace.ToDisplayString();
                TypeDeclarationSyntax? typeDeclarationSyntax = GenerateProxy(semanticModel, classNode, attribute);
                if (typeDeclarationSyntax is null) return;
                NamespaceDeclarationSyntax namespaceDeclaration = NamespaceDeclaration(IdentifierName(@namespace))
                    .AddUsings(
                        UsingDirective(IdentifierName("Tmds.DBus.Protocol")))
                    .AddMembers(typeDeclarationSyntax);
                CompilationUnitSyntax compilationUnitSyntax = MakeCompilationUnit(namespaceDeclaration);
                context.AddSource($"{@namespace}.{declaredClass.Name}.g.cs", compilationUnitSyntax.GetText(Encoding.UTF8));
            }
        }

        private static CompilationUnitSyntax MakeCompilationUnit(NamespaceDeclarationSyntax namespaceDeclaration) =>
            CompilationUnit().AddMembers(namespaceDeclaration
                .WithLeadingTrivia(
                    TriviaList(
                        Comment("// <auto-generated/>"),
                        Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.DisableKeyword), true)),
                        Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), true)))
                )
            ).NormalizeWhitespace();
    }
}
